/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1MatchArgument struct for V1MatchArgument
type V1MatchArgument struct {
	Key *string `json:"key,omitempty"`
	Type *int32 `json:"type,omitempty"`
	Value *V1MatchString `json:"value,omitempty"`
}

// NewV1MatchArgument instantiates a new V1MatchArgument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1MatchArgument() *V1MatchArgument {
	this := V1MatchArgument{}
	return &this
}

// NewV1MatchArgumentWithDefaults instantiates a new V1MatchArgument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1MatchArgumentWithDefaults() *V1MatchArgument {
	this := V1MatchArgument{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *V1MatchArgument) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MatchArgument) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *V1MatchArgument) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *V1MatchArgument) SetKey(v string) {
	o.Key = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1MatchArgument) GetType() int32 {
	if o == nil || o.Type == nil {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MatchArgument) GetTypeOk() (*int32, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1MatchArgument) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *V1MatchArgument) SetType(v int32) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *V1MatchArgument) GetValue() V1MatchString {
	if o == nil || o.Value == nil {
		var ret V1MatchString
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MatchArgument) GetValueOk() (*V1MatchString, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *V1MatchArgument) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given V1MatchString and assigns it to the Value field.
func (o *V1MatchArgument) SetValue(v V1MatchString) {
	o.Value = &v
}

func (o V1MatchArgument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableV1MatchArgument struct {
	value *V1MatchArgument
	isSet bool
}

func (v NullableV1MatchArgument) Get() *V1MatchArgument {
	return v.value
}

func (v *NullableV1MatchArgument) Set(val *V1MatchArgument) {
	v.value = val
	v.isSet = true
}

func (v NullableV1MatchArgument) IsSet() bool {
	return v.isSet
}

func (v *NullableV1MatchArgument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1MatchArgument(val *V1MatchArgument) *NullableV1MatchArgument {
	return &NullableV1MatchArgument{value: val, isSet: true}
}

func (v NullableV1MatchArgument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1MatchArgument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


