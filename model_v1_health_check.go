/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1HealthCheck struct for V1HealthCheck
type V1HealthCheck struct {
	Heartbeat *V1HeartbeatHealthCheck `json:"heartbeat,omitempty"`
	Type *int32 `json:"type,omitempty"`
}

// NewV1HealthCheck instantiates a new V1HealthCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1HealthCheck() *V1HealthCheck {
	this := V1HealthCheck{}
	return &this
}

// NewV1HealthCheckWithDefaults instantiates a new V1HealthCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1HealthCheckWithDefaults() *V1HealthCheck {
	this := V1HealthCheck{}
	return &this
}

// GetHeartbeat returns the Heartbeat field value if set, zero value otherwise.
func (o *V1HealthCheck) GetHeartbeat() V1HeartbeatHealthCheck {
	if o == nil || o.Heartbeat == nil {
		var ret V1HeartbeatHealthCheck
		return ret
	}
	return *o.Heartbeat
}

// GetHeartbeatOk returns a tuple with the Heartbeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HealthCheck) GetHeartbeatOk() (*V1HeartbeatHealthCheck, bool) {
	if o == nil || o.Heartbeat == nil {
		return nil, false
	}
	return o.Heartbeat, true
}

// HasHeartbeat returns a boolean if a field has been set.
func (o *V1HealthCheck) HasHeartbeat() bool {
	if o != nil && o.Heartbeat != nil {
		return true
	}

	return false
}

// SetHeartbeat gets a reference to the given V1HeartbeatHealthCheck and assigns it to the Heartbeat field.
func (o *V1HealthCheck) SetHeartbeat(v V1HeartbeatHealthCheck) {
	o.Heartbeat = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1HealthCheck) GetType() int32 {
	if o == nil || o.Type == nil {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HealthCheck) GetTypeOk() (*int32, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1HealthCheck) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *V1HealthCheck) SetType(v int32) {
	o.Type = &v
}

func (o V1HealthCheck) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Heartbeat != nil {
		toSerialize["heartbeat"] = o.Heartbeat
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableV1HealthCheck struct {
	value *V1HealthCheck
	isSet bool
}

func (v NullableV1HealthCheck) Get() *V1HealthCheck {
	return v.value
}

func (v *NullableV1HealthCheck) Set(val *V1HealthCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableV1HealthCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableV1HealthCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1HealthCheck(val *V1HealthCheck) *NullableV1HealthCheck {
	return &NullableV1HealthCheck{value: val, isSet: true}
}

func (v NullableV1HealthCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1HealthCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


