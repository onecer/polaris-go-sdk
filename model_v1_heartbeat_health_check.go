/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1HeartbeatHealthCheck struct for V1HeartbeatHealthCheck
type V1HeartbeatHealthCheck struct {
	Ttl *int32 `json:"ttl,omitempty"`
}

// NewV1HeartbeatHealthCheck instantiates a new V1HeartbeatHealthCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1HeartbeatHealthCheck() *V1HeartbeatHealthCheck {
	this := V1HeartbeatHealthCheck{}
	return &this
}

// NewV1HeartbeatHealthCheckWithDefaults instantiates a new V1HeartbeatHealthCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1HeartbeatHealthCheckWithDefaults() *V1HeartbeatHealthCheck {
	this := V1HeartbeatHealthCheck{}
	return &this
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *V1HeartbeatHealthCheck) GetTtl() int32 {
	if o == nil || o.Ttl == nil {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HeartbeatHealthCheck) GetTtlOk() (*int32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *V1HeartbeatHealthCheck) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *V1HeartbeatHealthCheck) SetTtl(v int32) {
	o.Ttl = &v
}

func (o V1HeartbeatHealthCheck) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	return json.Marshal(toSerialize)
}

type NullableV1HeartbeatHealthCheck struct {
	value *V1HeartbeatHealthCheck
	isSet bool
}

func (v NullableV1HeartbeatHealthCheck) Get() *V1HeartbeatHealthCheck {
	return v.value
}

func (v *NullableV1HeartbeatHealthCheck) Set(val *V1HeartbeatHealthCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableV1HeartbeatHealthCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableV1HeartbeatHealthCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1HeartbeatHealthCheck(val *V1HeartbeatHealthCheck) *NullableV1HeartbeatHealthCheck {
	return &NullableV1HeartbeatHealthCheck{value: val, isSet: true}
}

func (v NullableV1HeartbeatHealthCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1HeartbeatHealthCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


