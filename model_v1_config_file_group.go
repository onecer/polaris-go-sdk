/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1ConfigFileGroup struct for V1ConfigFileGroup
type V1ConfigFileGroup struct {
	Comment *string `json:"comment,omitempty"`
	CreateBy *string `json:"create_by,omitempty"`
	CreateTime *string `json:"create_time,omitempty"`
	Editable *bool `json:"editable,omitempty"`
	FileCount *int32 `json:"fileCount,omitempty"`
	GroupIds *[]string `json:"group_ids,omitempty"`
	Id *int32 `json:"id,omitempty"`
	ModifyBy *string `json:"modify_by,omitempty"`
	ModifyTime *string `json:"modify_time,omitempty"`
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Owner *string `json:"owner,omitempty"`
	RemoveGroupIds *[]string `json:"remove_group_ids,omitempty"`
	RemoveUserIds *[]string `json:"remove_user_ids,omitempty"`
	UserIds *[]string `json:"user_ids,omitempty"`
}

// NewV1ConfigFileGroup instantiates a new V1ConfigFileGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ConfigFileGroup() *V1ConfigFileGroup {
	this := V1ConfigFileGroup{}
	return &this
}

// NewV1ConfigFileGroupWithDefaults instantiates a new V1ConfigFileGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ConfigFileGroupWithDefaults() *V1ConfigFileGroup {
	this := V1ConfigFileGroup{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *V1ConfigFileGroup) SetComment(v string) {
	o.Comment = &v
}

// GetCreateBy returns the CreateBy field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetCreateBy() string {
	if o == nil || o.CreateBy == nil {
		var ret string
		return ret
	}
	return *o.CreateBy
}

// GetCreateByOk returns a tuple with the CreateBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetCreateByOk() (*string, bool) {
	if o == nil || o.CreateBy == nil {
		return nil, false
	}
	return o.CreateBy, true
}

// HasCreateBy returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasCreateBy() bool {
	if o != nil && o.CreateBy != nil {
		return true
	}

	return false
}

// SetCreateBy gets a reference to the given string and assigns it to the CreateBy field.
func (o *V1ConfigFileGroup) SetCreateBy(v string) {
	o.CreateBy = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetCreateTime() string {
	if o == nil || o.CreateTime == nil {
		var ret string
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetCreateTimeOk() (*string, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given string and assigns it to the CreateTime field.
func (o *V1ConfigFileGroup) SetCreateTime(v string) {
	o.CreateTime = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetEditable() bool {
	if o == nil || o.Editable == nil {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetEditableOk() (*bool, bool) {
	if o == nil || o.Editable == nil {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasEditable() bool {
	if o != nil && o.Editable != nil {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *V1ConfigFileGroup) SetEditable(v bool) {
	o.Editable = &v
}

// GetFileCount returns the FileCount field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetFileCount() int32 {
	if o == nil || o.FileCount == nil {
		var ret int32
		return ret
	}
	return *o.FileCount
}

// GetFileCountOk returns a tuple with the FileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetFileCountOk() (*int32, bool) {
	if o == nil || o.FileCount == nil {
		return nil, false
	}
	return o.FileCount, true
}

// HasFileCount returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasFileCount() bool {
	if o != nil && o.FileCount != nil {
		return true
	}

	return false
}

// SetFileCount gets a reference to the given int32 and assigns it to the FileCount field.
func (o *V1ConfigFileGroup) SetFileCount(v int32) {
	o.FileCount = &v
}

// GetGroupIds returns the GroupIds field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetGroupIds() []string {
	if o == nil || o.GroupIds == nil {
		var ret []string
		return ret
	}
	return *o.GroupIds
}

// GetGroupIdsOk returns a tuple with the GroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetGroupIdsOk() (*[]string, bool) {
	if o == nil || o.GroupIds == nil {
		return nil, false
	}
	return o.GroupIds, true
}

// HasGroupIds returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasGroupIds() bool {
	if o != nil && o.GroupIds != nil {
		return true
	}

	return false
}

// SetGroupIds gets a reference to the given []string and assigns it to the GroupIds field.
func (o *V1ConfigFileGroup) SetGroupIds(v []string) {
	o.GroupIds = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *V1ConfigFileGroup) SetId(v int32) {
	o.Id = &v
}

// GetModifyBy returns the ModifyBy field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetModifyBy() string {
	if o == nil || o.ModifyBy == nil {
		var ret string
		return ret
	}
	return *o.ModifyBy
}

// GetModifyByOk returns a tuple with the ModifyBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetModifyByOk() (*string, bool) {
	if o == nil || o.ModifyBy == nil {
		return nil, false
	}
	return o.ModifyBy, true
}

// HasModifyBy returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasModifyBy() bool {
	if o != nil && o.ModifyBy != nil {
		return true
	}

	return false
}

// SetModifyBy gets a reference to the given string and assigns it to the ModifyBy field.
func (o *V1ConfigFileGroup) SetModifyBy(v string) {
	o.ModifyBy = &v
}

// GetModifyTime returns the ModifyTime field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetModifyTime() string {
	if o == nil || o.ModifyTime == nil {
		var ret string
		return ret
	}
	return *o.ModifyTime
}

// GetModifyTimeOk returns a tuple with the ModifyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetModifyTimeOk() (*string, bool) {
	if o == nil || o.ModifyTime == nil {
		return nil, false
	}
	return o.ModifyTime, true
}

// HasModifyTime returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasModifyTime() bool {
	if o != nil && o.ModifyTime != nil {
		return true
	}

	return false
}

// SetModifyTime gets a reference to the given string and assigns it to the ModifyTime field.
func (o *V1ConfigFileGroup) SetModifyTime(v string) {
	o.ModifyTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1ConfigFileGroup) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *V1ConfigFileGroup) SetNamespace(v string) {
	o.Namespace = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *V1ConfigFileGroup) SetOwner(v string) {
	o.Owner = &v
}

// GetRemoveGroupIds returns the RemoveGroupIds field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetRemoveGroupIds() []string {
	if o == nil || o.RemoveGroupIds == nil {
		var ret []string
		return ret
	}
	return *o.RemoveGroupIds
}

// GetRemoveGroupIdsOk returns a tuple with the RemoveGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetRemoveGroupIdsOk() (*[]string, bool) {
	if o == nil || o.RemoveGroupIds == nil {
		return nil, false
	}
	return o.RemoveGroupIds, true
}

// HasRemoveGroupIds returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasRemoveGroupIds() bool {
	if o != nil && o.RemoveGroupIds != nil {
		return true
	}

	return false
}

// SetRemoveGroupIds gets a reference to the given []string and assigns it to the RemoveGroupIds field.
func (o *V1ConfigFileGroup) SetRemoveGroupIds(v []string) {
	o.RemoveGroupIds = &v
}

// GetRemoveUserIds returns the RemoveUserIds field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetRemoveUserIds() []string {
	if o == nil || o.RemoveUserIds == nil {
		var ret []string
		return ret
	}
	return *o.RemoveUserIds
}

// GetRemoveUserIdsOk returns a tuple with the RemoveUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetRemoveUserIdsOk() (*[]string, bool) {
	if o == nil || o.RemoveUserIds == nil {
		return nil, false
	}
	return o.RemoveUserIds, true
}

// HasRemoveUserIds returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasRemoveUserIds() bool {
	if o != nil && o.RemoveUserIds != nil {
		return true
	}

	return false
}

// SetRemoveUserIds gets a reference to the given []string and assigns it to the RemoveUserIds field.
func (o *V1ConfigFileGroup) SetRemoveUserIds(v []string) {
	o.RemoveUserIds = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *V1ConfigFileGroup) GetUserIds() []string {
	if o == nil || o.UserIds == nil {
		var ret []string
		return ret
	}
	return *o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFileGroup) GetUserIdsOk() (*[]string, bool) {
	if o == nil || o.UserIds == nil {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *V1ConfigFileGroup) HasUserIds() bool {
	if o != nil && o.UserIds != nil {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *V1ConfigFileGroup) SetUserIds(v []string) {
	o.UserIds = &v
}

func (o V1ConfigFileGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.CreateBy != nil {
		toSerialize["create_by"] = o.CreateBy
	}
	if o.CreateTime != nil {
		toSerialize["create_time"] = o.CreateTime
	}
	if o.Editable != nil {
		toSerialize["editable"] = o.Editable
	}
	if o.FileCount != nil {
		toSerialize["fileCount"] = o.FileCount
	}
	if o.GroupIds != nil {
		toSerialize["group_ids"] = o.GroupIds
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ModifyBy != nil {
		toSerialize["modify_by"] = o.ModifyBy
	}
	if o.ModifyTime != nil {
		toSerialize["modify_time"] = o.ModifyTime
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.RemoveGroupIds != nil {
		toSerialize["remove_group_ids"] = o.RemoveGroupIds
	}
	if o.RemoveUserIds != nil {
		toSerialize["remove_user_ids"] = o.RemoveUserIds
	}
	if o.UserIds != nil {
		toSerialize["user_ids"] = o.UserIds
	}
	return json.Marshal(toSerialize)
}

type NullableV1ConfigFileGroup struct {
	value *V1ConfigFileGroup
	isSet bool
}

func (v NullableV1ConfigFileGroup) Get() *V1ConfigFileGroup {
	return v.value
}

func (v *NullableV1ConfigFileGroup) Set(val *V1ConfigFileGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ConfigFileGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ConfigFileGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ConfigFileGroup(val *V1ConfigFileGroup) *NullableV1ConfigFileGroup {
	return &NullableV1ConfigFileGroup{value: val, isSet: true}
}

func (v NullableV1ConfigFileGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ConfigFileGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


