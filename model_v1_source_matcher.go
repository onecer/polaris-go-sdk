/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1SourceMatcher struct for V1SourceMatcher
type V1SourceMatcher struct {
	Labels *map[string]V1MatchString `json:"labels,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Service *string `json:"service,omitempty"`
}

// NewV1SourceMatcher instantiates a new V1SourceMatcher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SourceMatcher() *V1SourceMatcher {
	this := V1SourceMatcher{}
	return &this
}

// NewV1SourceMatcherWithDefaults instantiates a new V1SourceMatcher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SourceMatcherWithDefaults() *V1SourceMatcher {
	this := V1SourceMatcher{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *V1SourceMatcher) GetLabels() map[string]V1MatchString {
	if o == nil || o.Labels == nil {
		var ret map[string]V1MatchString
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceMatcher) GetLabelsOk() (*map[string]V1MatchString, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *V1SourceMatcher) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]V1MatchString and assigns it to the Labels field.
func (o *V1SourceMatcher) SetLabels(v map[string]V1MatchString) {
	o.Labels = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *V1SourceMatcher) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceMatcher) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *V1SourceMatcher) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *V1SourceMatcher) SetNamespace(v string) {
	o.Namespace = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *V1SourceMatcher) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SourceMatcher) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *V1SourceMatcher) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *V1SourceMatcher) SetService(v string) {
	o.Service = &v
}

func (o V1SourceMatcher) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	return json.Marshal(toSerialize)
}

type NullableV1SourceMatcher struct {
	value *V1SourceMatcher
	isSet bool
}

func (v NullableV1SourceMatcher) Get() *V1SourceMatcher {
	return v.value
}

func (v *NullableV1SourceMatcher) Set(val *V1SourceMatcher) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SourceMatcher) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SourceMatcher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SourceMatcher(val *V1SourceMatcher) *NullableV1SourceMatcher {
	return &NullableV1SourceMatcher{value: val, isSet: true}
}

func (v NullableV1SourceMatcher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SourceMatcher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


