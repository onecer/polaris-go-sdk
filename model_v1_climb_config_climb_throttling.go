/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1ClimbConfigClimbThrottling struct for V1ClimbConfigClimbThrottling
type V1ClimbConfigClimbThrottling struct {
	ColdAboveTuneDownRate *WrapperspbInt32Value `json:"coldAboveTuneDownRate,omitempty"`
	ColdAboveTuneUpRate *WrapperspbInt32Value `json:"coldAboveTuneUpRate,omitempty"`
	ColdBelowTuneDownRate *WrapperspbInt32Value `json:"coldBelowTuneDownRate,omitempty"`
	ColdBelowTuneUpRate *WrapperspbInt32Value `json:"coldBelowTuneUpRate,omitempty"`
	JudgeDuration *DurationpbDuration `json:"judgeDuration,omitempty"`
	LimitThresholdToTuneUp *WrapperspbInt32Value `json:"limitThresholdToTuneUp,omitempty"`
	TuneDownPeriod *WrapperspbInt32Value `json:"tuneDownPeriod,omitempty"`
	TuneUpPeriod *WrapperspbInt32Value `json:"tuneUpPeriod,omitempty"`
}

// NewV1ClimbConfigClimbThrottling instantiates a new V1ClimbConfigClimbThrottling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ClimbConfigClimbThrottling() *V1ClimbConfigClimbThrottling {
	this := V1ClimbConfigClimbThrottling{}
	return &this
}

// NewV1ClimbConfigClimbThrottlingWithDefaults instantiates a new V1ClimbConfigClimbThrottling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ClimbConfigClimbThrottlingWithDefaults() *V1ClimbConfigClimbThrottling {
	this := V1ClimbConfigClimbThrottling{}
	return &this
}

// GetColdAboveTuneDownRate returns the ColdAboveTuneDownRate field value if set, zero value otherwise.
func (o *V1ClimbConfigClimbThrottling) GetColdAboveTuneDownRate() WrapperspbInt32Value {
	if o == nil || o.ColdAboveTuneDownRate == nil {
		var ret WrapperspbInt32Value
		return ret
	}
	return *o.ColdAboveTuneDownRate
}

// GetColdAboveTuneDownRateOk returns a tuple with the ColdAboveTuneDownRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfigClimbThrottling) GetColdAboveTuneDownRateOk() (*WrapperspbInt32Value, bool) {
	if o == nil || o.ColdAboveTuneDownRate == nil {
		return nil, false
	}
	return o.ColdAboveTuneDownRate, true
}

// HasColdAboveTuneDownRate returns a boolean if a field has been set.
func (o *V1ClimbConfigClimbThrottling) HasColdAboveTuneDownRate() bool {
	if o != nil && o.ColdAboveTuneDownRate != nil {
		return true
	}

	return false
}

// SetColdAboveTuneDownRate gets a reference to the given WrapperspbInt32Value and assigns it to the ColdAboveTuneDownRate field.
func (o *V1ClimbConfigClimbThrottling) SetColdAboveTuneDownRate(v WrapperspbInt32Value) {
	o.ColdAboveTuneDownRate = &v
}

// GetColdAboveTuneUpRate returns the ColdAboveTuneUpRate field value if set, zero value otherwise.
func (o *V1ClimbConfigClimbThrottling) GetColdAboveTuneUpRate() WrapperspbInt32Value {
	if o == nil || o.ColdAboveTuneUpRate == nil {
		var ret WrapperspbInt32Value
		return ret
	}
	return *o.ColdAboveTuneUpRate
}

// GetColdAboveTuneUpRateOk returns a tuple with the ColdAboveTuneUpRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfigClimbThrottling) GetColdAboveTuneUpRateOk() (*WrapperspbInt32Value, bool) {
	if o == nil || o.ColdAboveTuneUpRate == nil {
		return nil, false
	}
	return o.ColdAboveTuneUpRate, true
}

// HasColdAboveTuneUpRate returns a boolean if a field has been set.
func (o *V1ClimbConfigClimbThrottling) HasColdAboveTuneUpRate() bool {
	if o != nil && o.ColdAboveTuneUpRate != nil {
		return true
	}

	return false
}

// SetColdAboveTuneUpRate gets a reference to the given WrapperspbInt32Value and assigns it to the ColdAboveTuneUpRate field.
func (o *V1ClimbConfigClimbThrottling) SetColdAboveTuneUpRate(v WrapperspbInt32Value) {
	o.ColdAboveTuneUpRate = &v
}

// GetColdBelowTuneDownRate returns the ColdBelowTuneDownRate field value if set, zero value otherwise.
func (o *V1ClimbConfigClimbThrottling) GetColdBelowTuneDownRate() WrapperspbInt32Value {
	if o == nil || o.ColdBelowTuneDownRate == nil {
		var ret WrapperspbInt32Value
		return ret
	}
	return *o.ColdBelowTuneDownRate
}

// GetColdBelowTuneDownRateOk returns a tuple with the ColdBelowTuneDownRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfigClimbThrottling) GetColdBelowTuneDownRateOk() (*WrapperspbInt32Value, bool) {
	if o == nil || o.ColdBelowTuneDownRate == nil {
		return nil, false
	}
	return o.ColdBelowTuneDownRate, true
}

// HasColdBelowTuneDownRate returns a boolean if a field has been set.
func (o *V1ClimbConfigClimbThrottling) HasColdBelowTuneDownRate() bool {
	if o != nil && o.ColdBelowTuneDownRate != nil {
		return true
	}

	return false
}

// SetColdBelowTuneDownRate gets a reference to the given WrapperspbInt32Value and assigns it to the ColdBelowTuneDownRate field.
func (o *V1ClimbConfigClimbThrottling) SetColdBelowTuneDownRate(v WrapperspbInt32Value) {
	o.ColdBelowTuneDownRate = &v
}

// GetColdBelowTuneUpRate returns the ColdBelowTuneUpRate field value if set, zero value otherwise.
func (o *V1ClimbConfigClimbThrottling) GetColdBelowTuneUpRate() WrapperspbInt32Value {
	if o == nil || o.ColdBelowTuneUpRate == nil {
		var ret WrapperspbInt32Value
		return ret
	}
	return *o.ColdBelowTuneUpRate
}

// GetColdBelowTuneUpRateOk returns a tuple with the ColdBelowTuneUpRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfigClimbThrottling) GetColdBelowTuneUpRateOk() (*WrapperspbInt32Value, bool) {
	if o == nil || o.ColdBelowTuneUpRate == nil {
		return nil, false
	}
	return o.ColdBelowTuneUpRate, true
}

// HasColdBelowTuneUpRate returns a boolean if a field has been set.
func (o *V1ClimbConfigClimbThrottling) HasColdBelowTuneUpRate() bool {
	if o != nil && o.ColdBelowTuneUpRate != nil {
		return true
	}

	return false
}

// SetColdBelowTuneUpRate gets a reference to the given WrapperspbInt32Value and assigns it to the ColdBelowTuneUpRate field.
func (o *V1ClimbConfigClimbThrottling) SetColdBelowTuneUpRate(v WrapperspbInt32Value) {
	o.ColdBelowTuneUpRate = &v
}

// GetJudgeDuration returns the JudgeDuration field value if set, zero value otherwise.
func (o *V1ClimbConfigClimbThrottling) GetJudgeDuration() DurationpbDuration {
	if o == nil || o.JudgeDuration == nil {
		var ret DurationpbDuration
		return ret
	}
	return *o.JudgeDuration
}

// GetJudgeDurationOk returns a tuple with the JudgeDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfigClimbThrottling) GetJudgeDurationOk() (*DurationpbDuration, bool) {
	if o == nil || o.JudgeDuration == nil {
		return nil, false
	}
	return o.JudgeDuration, true
}

// HasJudgeDuration returns a boolean if a field has been set.
func (o *V1ClimbConfigClimbThrottling) HasJudgeDuration() bool {
	if o != nil && o.JudgeDuration != nil {
		return true
	}

	return false
}

// SetJudgeDuration gets a reference to the given DurationpbDuration and assigns it to the JudgeDuration field.
func (o *V1ClimbConfigClimbThrottling) SetJudgeDuration(v DurationpbDuration) {
	o.JudgeDuration = &v
}

// GetLimitThresholdToTuneUp returns the LimitThresholdToTuneUp field value if set, zero value otherwise.
func (o *V1ClimbConfigClimbThrottling) GetLimitThresholdToTuneUp() WrapperspbInt32Value {
	if o == nil || o.LimitThresholdToTuneUp == nil {
		var ret WrapperspbInt32Value
		return ret
	}
	return *o.LimitThresholdToTuneUp
}

// GetLimitThresholdToTuneUpOk returns a tuple with the LimitThresholdToTuneUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfigClimbThrottling) GetLimitThresholdToTuneUpOk() (*WrapperspbInt32Value, bool) {
	if o == nil || o.LimitThresholdToTuneUp == nil {
		return nil, false
	}
	return o.LimitThresholdToTuneUp, true
}

// HasLimitThresholdToTuneUp returns a boolean if a field has been set.
func (o *V1ClimbConfigClimbThrottling) HasLimitThresholdToTuneUp() bool {
	if o != nil && o.LimitThresholdToTuneUp != nil {
		return true
	}

	return false
}

// SetLimitThresholdToTuneUp gets a reference to the given WrapperspbInt32Value and assigns it to the LimitThresholdToTuneUp field.
func (o *V1ClimbConfigClimbThrottling) SetLimitThresholdToTuneUp(v WrapperspbInt32Value) {
	o.LimitThresholdToTuneUp = &v
}

// GetTuneDownPeriod returns the TuneDownPeriod field value if set, zero value otherwise.
func (o *V1ClimbConfigClimbThrottling) GetTuneDownPeriod() WrapperspbInt32Value {
	if o == nil || o.TuneDownPeriod == nil {
		var ret WrapperspbInt32Value
		return ret
	}
	return *o.TuneDownPeriod
}

// GetTuneDownPeriodOk returns a tuple with the TuneDownPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfigClimbThrottling) GetTuneDownPeriodOk() (*WrapperspbInt32Value, bool) {
	if o == nil || o.TuneDownPeriod == nil {
		return nil, false
	}
	return o.TuneDownPeriod, true
}

// HasTuneDownPeriod returns a boolean if a field has been set.
func (o *V1ClimbConfigClimbThrottling) HasTuneDownPeriod() bool {
	if o != nil && o.TuneDownPeriod != nil {
		return true
	}

	return false
}

// SetTuneDownPeriod gets a reference to the given WrapperspbInt32Value and assigns it to the TuneDownPeriod field.
func (o *V1ClimbConfigClimbThrottling) SetTuneDownPeriod(v WrapperspbInt32Value) {
	o.TuneDownPeriod = &v
}

// GetTuneUpPeriod returns the TuneUpPeriod field value if set, zero value otherwise.
func (o *V1ClimbConfigClimbThrottling) GetTuneUpPeriod() WrapperspbInt32Value {
	if o == nil || o.TuneUpPeriod == nil {
		var ret WrapperspbInt32Value
		return ret
	}
	return *o.TuneUpPeriod
}

// GetTuneUpPeriodOk returns a tuple with the TuneUpPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfigClimbThrottling) GetTuneUpPeriodOk() (*WrapperspbInt32Value, bool) {
	if o == nil || o.TuneUpPeriod == nil {
		return nil, false
	}
	return o.TuneUpPeriod, true
}

// HasTuneUpPeriod returns a boolean if a field has been set.
func (o *V1ClimbConfigClimbThrottling) HasTuneUpPeriod() bool {
	if o != nil && o.TuneUpPeriod != nil {
		return true
	}

	return false
}

// SetTuneUpPeriod gets a reference to the given WrapperspbInt32Value and assigns it to the TuneUpPeriod field.
func (o *V1ClimbConfigClimbThrottling) SetTuneUpPeriod(v WrapperspbInt32Value) {
	o.TuneUpPeriod = &v
}

func (o V1ClimbConfigClimbThrottling) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ColdAboveTuneDownRate != nil {
		toSerialize["coldAboveTuneDownRate"] = o.ColdAboveTuneDownRate
	}
	if o.ColdAboveTuneUpRate != nil {
		toSerialize["coldAboveTuneUpRate"] = o.ColdAboveTuneUpRate
	}
	if o.ColdBelowTuneDownRate != nil {
		toSerialize["coldBelowTuneDownRate"] = o.ColdBelowTuneDownRate
	}
	if o.ColdBelowTuneUpRate != nil {
		toSerialize["coldBelowTuneUpRate"] = o.ColdBelowTuneUpRate
	}
	if o.JudgeDuration != nil {
		toSerialize["judgeDuration"] = o.JudgeDuration
	}
	if o.LimitThresholdToTuneUp != nil {
		toSerialize["limitThresholdToTuneUp"] = o.LimitThresholdToTuneUp
	}
	if o.TuneDownPeriod != nil {
		toSerialize["tuneDownPeriod"] = o.TuneDownPeriod
	}
	if o.TuneUpPeriod != nil {
		toSerialize["tuneUpPeriod"] = o.TuneUpPeriod
	}
	return json.Marshal(toSerialize)
}

type NullableV1ClimbConfigClimbThrottling struct {
	value *V1ClimbConfigClimbThrottling
	isSet bool
}

func (v NullableV1ClimbConfigClimbThrottling) Get() *V1ClimbConfigClimbThrottling {
	return v.value
}

func (v *NullableV1ClimbConfigClimbThrottling) Set(val *V1ClimbConfigClimbThrottling) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ClimbConfigClimbThrottling) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ClimbConfigClimbThrottling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ClimbConfigClimbThrottling(val *V1ClimbConfigClimbThrottling) *NullableV1ClimbConfigClimbThrottling {
	return &NullableV1ClimbConfigClimbThrottling{value: val, isSet: true}
}

func (v NullableV1ClimbConfigClimbThrottling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ClimbConfigClimbThrottling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


