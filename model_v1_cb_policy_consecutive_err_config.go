/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1CbPolicyConsecutiveErrConfig struct for V1CbPolicyConsecutiveErrConfig
type V1CbPolicyConsecutiveErrConfig struct {
	ConsecutiveErrorToOpen *int32 `json:"consecutiveErrorToOpen,omitempty"`
	ConsecutiveErrorToPreserved *int32 `json:"consecutiveErrorToPreserved,omitempty"`
	Enable *bool `json:"enable,omitempty"`
}

// NewV1CbPolicyConsecutiveErrConfig instantiates a new V1CbPolicyConsecutiveErrConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CbPolicyConsecutiveErrConfig() *V1CbPolicyConsecutiveErrConfig {
	this := V1CbPolicyConsecutiveErrConfig{}
	return &this
}

// NewV1CbPolicyConsecutiveErrConfigWithDefaults instantiates a new V1CbPolicyConsecutiveErrConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CbPolicyConsecutiveErrConfigWithDefaults() *V1CbPolicyConsecutiveErrConfig {
	this := V1CbPolicyConsecutiveErrConfig{}
	return &this
}

// GetConsecutiveErrorToOpen returns the ConsecutiveErrorToOpen field value if set, zero value otherwise.
func (o *V1CbPolicyConsecutiveErrConfig) GetConsecutiveErrorToOpen() int32 {
	if o == nil || o.ConsecutiveErrorToOpen == nil {
		var ret int32
		return ret
	}
	return *o.ConsecutiveErrorToOpen
}

// GetConsecutiveErrorToOpenOk returns a tuple with the ConsecutiveErrorToOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CbPolicyConsecutiveErrConfig) GetConsecutiveErrorToOpenOk() (*int32, bool) {
	if o == nil || o.ConsecutiveErrorToOpen == nil {
		return nil, false
	}
	return o.ConsecutiveErrorToOpen, true
}

// HasConsecutiveErrorToOpen returns a boolean if a field has been set.
func (o *V1CbPolicyConsecutiveErrConfig) HasConsecutiveErrorToOpen() bool {
	if o != nil && o.ConsecutiveErrorToOpen != nil {
		return true
	}

	return false
}

// SetConsecutiveErrorToOpen gets a reference to the given int32 and assigns it to the ConsecutiveErrorToOpen field.
func (o *V1CbPolicyConsecutiveErrConfig) SetConsecutiveErrorToOpen(v int32) {
	o.ConsecutiveErrorToOpen = &v
}

// GetConsecutiveErrorToPreserved returns the ConsecutiveErrorToPreserved field value if set, zero value otherwise.
func (o *V1CbPolicyConsecutiveErrConfig) GetConsecutiveErrorToPreserved() int32 {
	if o == nil || o.ConsecutiveErrorToPreserved == nil {
		var ret int32
		return ret
	}
	return *o.ConsecutiveErrorToPreserved
}

// GetConsecutiveErrorToPreservedOk returns a tuple with the ConsecutiveErrorToPreserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CbPolicyConsecutiveErrConfig) GetConsecutiveErrorToPreservedOk() (*int32, bool) {
	if o == nil || o.ConsecutiveErrorToPreserved == nil {
		return nil, false
	}
	return o.ConsecutiveErrorToPreserved, true
}

// HasConsecutiveErrorToPreserved returns a boolean if a field has been set.
func (o *V1CbPolicyConsecutiveErrConfig) HasConsecutiveErrorToPreserved() bool {
	if o != nil && o.ConsecutiveErrorToPreserved != nil {
		return true
	}

	return false
}

// SetConsecutiveErrorToPreserved gets a reference to the given int32 and assigns it to the ConsecutiveErrorToPreserved field.
func (o *V1CbPolicyConsecutiveErrConfig) SetConsecutiveErrorToPreserved(v int32) {
	o.ConsecutiveErrorToPreserved = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *V1CbPolicyConsecutiveErrConfig) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CbPolicyConsecutiveErrConfig) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *V1CbPolicyConsecutiveErrConfig) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *V1CbPolicyConsecutiveErrConfig) SetEnable(v bool) {
	o.Enable = &v
}

func (o V1CbPolicyConsecutiveErrConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConsecutiveErrorToOpen != nil {
		toSerialize["consecutiveErrorToOpen"] = o.ConsecutiveErrorToOpen
	}
	if o.ConsecutiveErrorToPreserved != nil {
		toSerialize["consecutiveErrorToPreserved"] = o.ConsecutiveErrorToPreserved
	}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	return json.Marshal(toSerialize)
}

type NullableV1CbPolicyConsecutiveErrConfig struct {
	value *V1CbPolicyConsecutiveErrConfig
	isSet bool
}

func (v NullableV1CbPolicyConsecutiveErrConfig) Get() *V1CbPolicyConsecutiveErrConfig {
	return v.value
}

func (v *NullableV1CbPolicyConsecutiveErrConfig) Set(val *V1CbPolicyConsecutiveErrConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CbPolicyConsecutiveErrConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CbPolicyConsecutiveErrConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CbPolicyConsecutiveErrConfig(val *V1CbPolicyConsecutiveErrConfig) *NullableV1CbPolicyConsecutiveErrConfig {
	return &NullableV1CbPolicyConsecutiveErrConfig{value: val, isSet: true}
}

func (v NullableV1CbPolicyConsecutiveErrConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CbPolicyConsecutiveErrConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


