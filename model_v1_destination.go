/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1Destination struct for V1Destination
type V1Destination struct {
	Isolate *bool `json:"isolate,omitempty"`
	Metadata *map[string]V1MatchString `json:"metadata,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
	Service *string `json:"service,omitempty"`
	Transfer *string `json:"transfer,omitempty"`
	Weight *int32 `json:"weight,omitempty"`
}

// NewV1Destination instantiates a new V1Destination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Destination() *V1Destination {
	this := V1Destination{}
	return &this
}

// NewV1DestinationWithDefaults instantiates a new V1Destination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DestinationWithDefaults() *V1Destination {
	this := V1Destination{}
	return &this
}

// GetIsolate returns the Isolate field value if set, zero value otherwise.
func (o *V1Destination) GetIsolate() bool {
	if o == nil || o.Isolate == nil {
		var ret bool
		return ret
	}
	return *o.Isolate
}

// GetIsolateOk returns a tuple with the Isolate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Destination) GetIsolateOk() (*bool, bool) {
	if o == nil || o.Isolate == nil {
		return nil, false
	}
	return o.Isolate, true
}

// HasIsolate returns a boolean if a field has been set.
func (o *V1Destination) HasIsolate() bool {
	if o != nil && o.Isolate != nil {
		return true
	}

	return false
}

// SetIsolate gets a reference to the given bool and assigns it to the Isolate field.
func (o *V1Destination) SetIsolate(v bool) {
	o.Isolate = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1Destination) GetMetadata() map[string]V1MatchString {
	if o == nil || o.Metadata == nil {
		var ret map[string]V1MatchString
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Destination) GetMetadataOk() (*map[string]V1MatchString, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1Destination) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]V1MatchString and assigns it to the Metadata field.
func (o *V1Destination) SetMetadata(v map[string]V1MatchString) {
	o.Metadata = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *V1Destination) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Destination) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *V1Destination) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *V1Destination) SetNamespace(v string) {
	o.Namespace = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *V1Destination) GetPriority() int32 {
	if o == nil || o.Priority == nil {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Destination) GetPriorityOk() (*int32, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *V1Destination) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *V1Destination) SetPriority(v int32) {
	o.Priority = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *V1Destination) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Destination) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *V1Destination) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *V1Destination) SetService(v string) {
	o.Service = &v
}

// GetTransfer returns the Transfer field value if set, zero value otherwise.
func (o *V1Destination) GetTransfer() string {
	if o == nil || o.Transfer == nil {
		var ret string
		return ret
	}
	return *o.Transfer
}

// GetTransferOk returns a tuple with the Transfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Destination) GetTransferOk() (*string, bool) {
	if o == nil || o.Transfer == nil {
		return nil, false
	}
	return o.Transfer, true
}

// HasTransfer returns a boolean if a field has been set.
func (o *V1Destination) HasTransfer() bool {
	if o != nil && o.Transfer != nil {
		return true
	}

	return false
}

// SetTransfer gets a reference to the given string and assigns it to the Transfer field.
func (o *V1Destination) SetTransfer(v string) {
	o.Transfer = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *V1Destination) GetWeight() int32 {
	if o == nil || o.Weight == nil {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Destination) GetWeightOk() (*int32, bool) {
	if o == nil || o.Weight == nil {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *V1Destination) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *V1Destination) SetWeight(v int32) {
	o.Weight = &v
}

func (o V1Destination) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Isolate != nil {
		toSerialize["isolate"] = o.Isolate
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Transfer != nil {
		toSerialize["transfer"] = o.Transfer
	}
	if o.Weight != nil {
		toSerialize["weight"] = o.Weight
	}
	return json.Marshal(toSerialize)
}

type NullableV1Destination struct {
	value *V1Destination
	isSet bool
}

func (v NullableV1Destination) Get() *V1Destination {
	return v.value
}

func (v *NullableV1Destination) Set(val *V1Destination) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Destination) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Destination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Destination(val *V1Destination) *NullableV1Destination {
	return &NullableV1Destination{value: val, isSet: true}
}

func (v NullableV1Destination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Destination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


