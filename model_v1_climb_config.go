/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1ClimbConfig struct for V1ClimbConfig
type V1ClimbConfig struct {
	Enable *bool `json:"enable,omitempty"`
	Metric *V1ClimbConfigMetricConfig `json:"metric,omitempty"`
	Policy *V1ClimbConfigTriggerPolicy `json:"policy,omitempty"`
	Throttling *V1ClimbConfigClimbThrottling `json:"throttling,omitempty"`
}

// NewV1ClimbConfig instantiates a new V1ClimbConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ClimbConfig() *V1ClimbConfig {
	this := V1ClimbConfig{}
	return &this
}

// NewV1ClimbConfigWithDefaults instantiates a new V1ClimbConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ClimbConfigWithDefaults() *V1ClimbConfig {
	this := V1ClimbConfig{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *V1ClimbConfig) GetEnable() bool {
	if o == nil || o.Enable == nil {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfig) GetEnableOk() (*bool, bool) {
	if o == nil || o.Enable == nil {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *V1ClimbConfig) HasEnable() bool {
	if o != nil && o.Enable != nil {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *V1ClimbConfig) SetEnable(v bool) {
	o.Enable = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *V1ClimbConfig) GetMetric() V1ClimbConfigMetricConfig {
	if o == nil || o.Metric == nil {
		var ret V1ClimbConfigMetricConfig
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfig) GetMetricOk() (*V1ClimbConfigMetricConfig, bool) {
	if o == nil || o.Metric == nil {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *V1ClimbConfig) HasMetric() bool {
	if o != nil && o.Metric != nil {
		return true
	}

	return false
}

// SetMetric gets a reference to the given V1ClimbConfigMetricConfig and assigns it to the Metric field.
func (o *V1ClimbConfig) SetMetric(v V1ClimbConfigMetricConfig) {
	o.Metric = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *V1ClimbConfig) GetPolicy() V1ClimbConfigTriggerPolicy {
	if o == nil || o.Policy == nil {
		var ret V1ClimbConfigTriggerPolicy
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfig) GetPolicyOk() (*V1ClimbConfigTriggerPolicy, bool) {
	if o == nil || o.Policy == nil {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *V1ClimbConfig) HasPolicy() bool {
	if o != nil && o.Policy != nil {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given V1ClimbConfigTriggerPolicy and assigns it to the Policy field.
func (o *V1ClimbConfig) SetPolicy(v V1ClimbConfigTriggerPolicy) {
	o.Policy = &v
}

// GetThrottling returns the Throttling field value if set, zero value otherwise.
func (o *V1ClimbConfig) GetThrottling() V1ClimbConfigClimbThrottling {
	if o == nil || o.Throttling == nil {
		var ret V1ClimbConfigClimbThrottling
		return ret
	}
	return *o.Throttling
}

// GetThrottlingOk returns a tuple with the Throttling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClimbConfig) GetThrottlingOk() (*V1ClimbConfigClimbThrottling, bool) {
	if o == nil || o.Throttling == nil {
		return nil, false
	}
	return o.Throttling, true
}

// HasThrottling returns a boolean if a field has been set.
func (o *V1ClimbConfig) HasThrottling() bool {
	if o != nil && o.Throttling != nil {
		return true
	}

	return false
}

// SetThrottling gets a reference to the given V1ClimbConfigClimbThrottling and assigns it to the Throttling field.
func (o *V1ClimbConfig) SetThrottling(v V1ClimbConfigClimbThrottling) {
	o.Throttling = &v
}

func (o V1ClimbConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enable != nil {
		toSerialize["enable"] = o.Enable
	}
	if o.Metric != nil {
		toSerialize["metric"] = o.Metric
	}
	if o.Policy != nil {
		toSerialize["policy"] = o.Policy
	}
	if o.Throttling != nil {
		toSerialize["throttling"] = o.Throttling
	}
	return json.Marshal(toSerialize)
}

type NullableV1ClimbConfig struct {
	value *V1ClimbConfig
	isSet bool
}

func (v NullableV1ClimbConfig) Get() *V1ClimbConfig {
	return v.value
}

func (v *NullableV1ClimbConfig) Set(val *V1ClimbConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ClimbConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ClimbConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ClimbConfig(val *V1ClimbConfig) *NullableV1ClimbConfig {
	return &NullableV1ClimbConfig{value: val, isSet: true}
}

func (v NullableV1ClimbConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ClimbConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


