/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1UserGroup struct for V1UserGroup
type V1UserGroup struct {
	AuthToken *string `json:"auth_token,omitempty"`
	Comment *string `json:"comment,omitempty"`
	Ctime *string `json:"ctime,omitempty"`
	Id *string `json:"id,omitempty"`
	Mtime *string `json:"mtime,omitempty"`
	Name *string `json:"name,omitempty"`
	Owner *string `json:"owner,omitempty"`
	Relation *V1UserGroupRelation `json:"relation,omitempty"`
	TokenEnable *bool `json:"token_enable,omitempty"`
	UserCount *int32 `json:"user_count,omitempty"`
}

// NewV1UserGroup instantiates a new V1UserGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1UserGroup() *V1UserGroup {
	this := V1UserGroup{}
	return &this
}

// NewV1UserGroupWithDefaults instantiates a new V1UserGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1UserGroupWithDefaults() *V1UserGroup {
	this := V1UserGroup{}
	return &this
}

// GetAuthToken returns the AuthToken field value if set, zero value otherwise.
func (o *V1UserGroup) GetAuthToken() string {
	if o == nil || o.AuthToken == nil {
		var ret string
		return ret
	}
	return *o.AuthToken
}

// GetAuthTokenOk returns a tuple with the AuthToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserGroup) GetAuthTokenOk() (*string, bool) {
	if o == nil || o.AuthToken == nil {
		return nil, false
	}
	return o.AuthToken, true
}

// HasAuthToken returns a boolean if a field has been set.
func (o *V1UserGroup) HasAuthToken() bool {
	if o != nil && o.AuthToken != nil {
		return true
	}

	return false
}

// SetAuthToken gets a reference to the given string and assigns it to the AuthToken field.
func (o *V1UserGroup) SetAuthToken(v string) {
	o.AuthToken = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *V1UserGroup) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserGroup) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *V1UserGroup) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *V1UserGroup) SetComment(v string) {
	o.Comment = &v
}

// GetCtime returns the Ctime field value if set, zero value otherwise.
func (o *V1UserGroup) GetCtime() string {
	if o == nil || o.Ctime == nil {
		var ret string
		return ret
	}
	return *o.Ctime
}

// GetCtimeOk returns a tuple with the Ctime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserGroup) GetCtimeOk() (*string, bool) {
	if o == nil || o.Ctime == nil {
		return nil, false
	}
	return o.Ctime, true
}

// HasCtime returns a boolean if a field has been set.
func (o *V1UserGroup) HasCtime() bool {
	if o != nil && o.Ctime != nil {
		return true
	}

	return false
}

// SetCtime gets a reference to the given string and assigns it to the Ctime field.
func (o *V1UserGroup) SetCtime(v string) {
	o.Ctime = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1UserGroup) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserGroup) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1UserGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1UserGroup) SetId(v string) {
	o.Id = &v
}

// GetMtime returns the Mtime field value if set, zero value otherwise.
func (o *V1UserGroup) GetMtime() string {
	if o == nil || o.Mtime == nil {
		var ret string
		return ret
	}
	return *o.Mtime
}

// GetMtimeOk returns a tuple with the Mtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserGroup) GetMtimeOk() (*string, bool) {
	if o == nil || o.Mtime == nil {
		return nil, false
	}
	return o.Mtime, true
}

// HasMtime returns a boolean if a field has been set.
func (o *V1UserGroup) HasMtime() bool {
	if o != nil && o.Mtime != nil {
		return true
	}

	return false
}

// SetMtime gets a reference to the given string and assigns it to the Mtime field.
func (o *V1UserGroup) SetMtime(v string) {
	o.Mtime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1UserGroup) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserGroup) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1UserGroup) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1UserGroup) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *V1UserGroup) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserGroup) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *V1UserGroup) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *V1UserGroup) SetOwner(v string) {
	o.Owner = &v
}

// GetRelation returns the Relation field value if set, zero value otherwise.
func (o *V1UserGroup) GetRelation() V1UserGroupRelation {
	if o == nil || o.Relation == nil {
		var ret V1UserGroupRelation
		return ret
	}
	return *o.Relation
}

// GetRelationOk returns a tuple with the Relation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserGroup) GetRelationOk() (*V1UserGroupRelation, bool) {
	if o == nil || o.Relation == nil {
		return nil, false
	}
	return o.Relation, true
}

// HasRelation returns a boolean if a field has been set.
func (o *V1UserGroup) HasRelation() bool {
	if o != nil && o.Relation != nil {
		return true
	}

	return false
}

// SetRelation gets a reference to the given V1UserGroupRelation and assigns it to the Relation field.
func (o *V1UserGroup) SetRelation(v V1UserGroupRelation) {
	o.Relation = &v
}

// GetTokenEnable returns the TokenEnable field value if set, zero value otherwise.
func (o *V1UserGroup) GetTokenEnable() bool {
	if o == nil || o.TokenEnable == nil {
		var ret bool
		return ret
	}
	return *o.TokenEnable
}

// GetTokenEnableOk returns a tuple with the TokenEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserGroup) GetTokenEnableOk() (*bool, bool) {
	if o == nil || o.TokenEnable == nil {
		return nil, false
	}
	return o.TokenEnable, true
}

// HasTokenEnable returns a boolean if a field has been set.
func (o *V1UserGroup) HasTokenEnable() bool {
	if o != nil && o.TokenEnable != nil {
		return true
	}

	return false
}

// SetTokenEnable gets a reference to the given bool and assigns it to the TokenEnable field.
func (o *V1UserGroup) SetTokenEnable(v bool) {
	o.TokenEnable = &v
}

// GetUserCount returns the UserCount field value if set, zero value otherwise.
func (o *V1UserGroup) GetUserCount() int32 {
	if o == nil || o.UserCount == nil {
		var ret int32
		return ret
	}
	return *o.UserCount
}

// GetUserCountOk returns a tuple with the UserCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UserGroup) GetUserCountOk() (*int32, bool) {
	if o == nil || o.UserCount == nil {
		return nil, false
	}
	return o.UserCount, true
}

// HasUserCount returns a boolean if a field has been set.
func (o *V1UserGroup) HasUserCount() bool {
	if o != nil && o.UserCount != nil {
		return true
	}

	return false
}

// SetUserCount gets a reference to the given int32 and assigns it to the UserCount field.
func (o *V1UserGroup) SetUserCount(v int32) {
	o.UserCount = &v
}

func (o V1UserGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthToken != nil {
		toSerialize["auth_token"] = o.AuthToken
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Ctime != nil {
		toSerialize["ctime"] = o.Ctime
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Mtime != nil {
		toSerialize["mtime"] = o.Mtime
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Relation != nil {
		toSerialize["relation"] = o.Relation
	}
	if o.TokenEnable != nil {
		toSerialize["token_enable"] = o.TokenEnable
	}
	if o.UserCount != nil {
		toSerialize["user_count"] = o.UserCount
	}
	return json.Marshal(toSerialize)
}

type NullableV1UserGroup struct {
	value *V1UserGroup
	isSet bool
}

func (v NullableV1UserGroup) Get() *V1UserGroup {
	return v.value
}

func (v *NullableV1UserGroup) Set(val *V1UserGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableV1UserGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableV1UserGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1UserGroup(val *V1UserGroup) *NullableV1UserGroup {
	return &NullableV1UserGroup{value: val, isSet: true}
}

func (v NullableV1UserGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1UserGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


