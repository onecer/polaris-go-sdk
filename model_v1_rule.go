/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1Rule struct for V1Rule
type V1Rule struct {
	Action *string `json:"action,omitempty"`
	Adjuster *V1AmountAdjuster `json:"adjuster,omitempty"`
	AmountMode *int32 `json:"amount_mode,omitempty"`
	Amounts *[]V1Amount `json:"amounts,omitempty"`
	Arguments *[]V1MatchArgument `json:"arguments,omitempty"`
	Cluster *V1RateLimitCluster `json:"cluster,omitempty"`
	Ctime *string `json:"ctime,omitempty"`
	Disable *bool `json:"disable,omitempty"`
	Etime *string `json:"etime,omitempty"`
	Failover *int32 `json:"failover,omitempty"`
	Id *string `json:"id,omitempty"`
	Labels *map[string]V1MatchString `json:"labels,omitempty"`
	MaxQueueDelay *int32 `json:"max_queue_delay,omitempty"`
	Method *V1MatchString `json:"method,omitempty"`
	Mtime *string `json:"mtime,omitempty"`
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
	RegexCombine *bool `json:"regex_combine,omitempty"`
	Report *V1Report `json:"report,omitempty"`
	Resource *int32 `json:"resource,omitempty"`
	Revision *string `json:"revision,omitempty"`
	Service *string `json:"service,omitempty"`
	ServiceToken *string `json:"service_token,omitempty"`
	Subset *map[string]V1MatchString `json:"subset,omitempty"`
	Type *int32 `json:"type,omitempty"`
}

// NewV1Rule instantiates a new V1Rule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Rule() *V1Rule {
	this := V1Rule{}
	return &this
}

// NewV1RuleWithDefaults instantiates a new V1Rule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1RuleWithDefaults() *V1Rule {
	this := V1Rule{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *V1Rule) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *V1Rule) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *V1Rule) SetAction(v string) {
	o.Action = &v
}

// GetAdjuster returns the Adjuster field value if set, zero value otherwise.
func (o *V1Rule) GetAdjuster() V1AmountAdjuster {
	if o == nil || o.Adjuster == nil {
		var ret V1AmountAdjuster
		return ret
	}
	return *o.Adjuster
}

// GetAdjusterOk returns a tuple with the Adjuster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetAdjusterOk() (*V1AmountAdjuster, bool) {
	if o == nil || o.Adjuster == nil {
		return nil, false
	}
	return o.Adjuster, true
}

// HasAdjuster returns a boolean if a field has been set.
func (o *V1Rule) HasAdjuster() bool {
	if o != nil && o.Adjuster != nil {
		return true
	}

	return false
}

// SetAdjuster gets a reference to the given V1AmountAdjuster and assigns it to the Adjuster field.
func (o *V1Rule) SetAdjuster(v V1AmountAdjuster) {
	o.Adjuster = &v
}

// GetAmountMode returns the AmountMode field value if set, zero value otherwise.
func (o *V1Rule) GetAmountMode() int32 {
	if o == nil || o.AmountMode == nil {
		var ret int32
		return ret
	}
	return *o.AmountMode
}

// GetAmountModeOk returns a tuple with the AmountMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetAmountModeOk() (*int32, bool) {
	if o == nil || o.AmountMode == nil {
		return nil, false
	}
	return o.AmountMode, true
}

// HasAmountMode returns a boolean if a field has been set.
func (o *V1Rule) HasAmountMode() bool {
	if o != nil && o.AmountMode != nil {
		return true
	}

	return false
}

// SetAmountMode gets a reference to the given int32 and assigns it to the AmountMode field.
func (o *V1Rule) SetAmountMode(v int32) {
	o.AmountMode = &v
}

// GetAmounts returns the Amounts field value if set, zero value otherwise.
func (o *V1Rule) GetAmounts() []V1Amount {
	if o == nil || o.Amounts == nil {
		var ret []V1Amount
		return ret
	}
	return *o.Amounts
}

// GetAmountsOk returns a tuple with the Amounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetAmountsOk() (*[]V1Amount, bool) {
	if o == nil || o.Amounts == nil {
		return nil, false
	}
	return o.Amounts, true
}

// HasAmounts returns a boolean if a field has been set.
func (o *V1Rule) HasAmounts() bool {
	if o != nil && o.Amounts != nil {
		return true
	}

	return false
}

// SetAmounts gets a reference to the given []V1Amount and assigns it to the Amounts field.
func (o *V1Rule) SetAmounts(v []V1Amount) {
	o.Amounts = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *V1Rule) GetArguments() []V1MatchArgument {
	if o == nil || o.Arguments == nil {
		var ret []V1MatchArgument
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetArgumentsOk() (*[]V1MatchArgument, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *V1Rule) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given []V1MatchArgument and assigns it to the Arguments field.
func (o *V1Rule) SetArguments(v []V1MatchArgument) {
	o.Arguments = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *V1Rule) GetCluster() V1RateLimitCluster {
	if o == nil || o.Cluster == nil {
		var ret V1RateLimitCluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetClusterOk() (*V1RateLimitCluster, bool) {
	if o == nil || o.Cluster == nil {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *V1Rule) HasCluster() bool {
	if o != nil && o.Cluster != nil {
		return true
	}

	return false
}

// SetCluster gets a reference to the given V1RateLimitCluster and assigns it to the Cluster field.
func (o *V1Rule) SetCluster(v V1RateLimitCluster) {
	o.Cluster = &v
}

// GetCtime returns the Ctime field value if set, zero value otherwise.
func (o *V1Rule) GetCtime() string {
	if o == nil || o.Ctime == nil {
		var ret string
		return ret
	}
	return *o.Ctime
}

// GetCtimeOk returns a tuple with the Ctime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetCtimeOk() (*string, bool) {
	if o == nil || o.Ctime == nil {
		return nil, false
	}
	return o.Ctime, true
}

// HasCtime returns a boolean if a field has been set.
func (o *V1Rule) HasCtime() bool {
	if o != nil && o.Ctime != nil {
		return true
	}

	return false
}

// SetCtime gets a reference to the given string and assigns it to the Ctime field.
func (o *V1Rule) SetCtime(v string) {
	o.Ctime = &v
}

// GetDisable returns the Disable field value if set, zero value otherwise.
func (o *V1Rule) GetDisable() bool {
	if o == nil || o.Disable == nil {
		var ret bool
		return ret
	}
	return *o.Disable
}

// GetDisableOk returns a tuple with the Disable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetDisableOk() (*bool, bool) {
	if o == nil || o.Disable == nil {
		return nil, false
	}
	return o.Disable, true
}

// HasDisable returns a boolean if a field has been set.
func (o *V1Rule) HasDisable() bool {
	if o != nil && o.Disable != nil {
		return true
	}

	return false
}

// SetDisable gets a reference to the given bool and assigns it to the Disable field.
func (o *V1Rule) SetDisable(v bool) {
	o.Disable = &v
}

// GetEtime returns the Etime field value if set, zero value otherwise.
func (o *V1Rule) GetEtime() string {
	if o == nil || o.Etime == nil {
		var ret string
		return ret
	}
	return *o.Etime
}

// GetEtimeOk returns a tuple with the Etime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetEtimeOk() (*string, bool) {
	if o == nil || o.Etime == nil {
		return nil, false
	}
	return o.Etime, true
}

// HasEtime returns a boolean if a field has been set.
func (o *V1Rule) HasEtime() bool {
	if o != nil && o.Etime != nil {
		return true
	}

	return false
}

// SetEtime gets a reference to the given string and assigns it to the Etime field.
func (o *V1Rule) SetEtime(v string) {
	o.Etime = &v
}

// GetFailover returns the Failover field value if set, zero value otherwise.
func (o *V1Rule) GetFailover() int32 {
	if o == nil || o.Failover == nil {
		var ret int32
		return ret
	}
	return *o.Failover
}

// GetFailoverOk returns a tuple with the Failover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetFailoverOk() (*int32, bool) {
	if o == nil || o.Failover == nil {
		return nil, false
	}
	return o.Failover, true
}

// HasFailover returns a boolean if a field has been set.
func (o *V1Rule) HasFailover() bool {
	if o != nil && o.Failover != nil {
		return true
	}

	return false
}

// SetFailover gets a reference to the given int32 and assigns it to the Failover field.
func (o *V1Rule) SetFailover(v int32) {
	o.Failover = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1Rule) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1Rule) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1Rule) SetId(v string) {
	o.Id = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *V1Rule) GetLabels() map[string]V1MatchString {
	if o == nil || o.Labels == nil {
		var ret map[string]V1MatchString
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetLabelsOk() (*map[string]V1MatchString, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *V1Rule) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]V1MatchString and assigns it to the Labels field.
func (o *V1Rule) SetLabels(v map[string]V1MatchString) {
	o.Labels = &v
}

// GetMaxQueueDelay returns the MaxQueueDelay field value if set, zero value otherwise.
func (o *V1Rule) GetMaxQueueDelay() int32 {
	if o == nil || o.MaxQueueDelay == nil {
		var ret int32
		return ret
	}
	return *o.MaxQueueDelay
}

// GetMaxQueueDelayOk returns a tuple with the MaxQueueDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetMaxQueueDelayOk() (*int32, bool) {
	if o == nil || o.MaxQueueDelay == nil {
		return nil, false
	}
	return o.MaxQueueDelay, true
}

// HasMaxQueueDelay returns a boolean if a field has been set.
func (o *V1Rule) HasMaxQueueDelay() bool {
	if o != nil && o.MaxQueueDelay != nil {
		return true
	}

	return false
}

// SetMaxQueueDelay gets a reference to the given int32 and assigns it to the MaxQueueDelay field.
func (o *V1Rule) SetMaxQueueDelay(v int32) {
	o.MaxQueueDelay = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *V1Rule) GetMethod() V1MatchString {
	if o == nil || o.Method == nil {
		var ret V1MatchString
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetMethodOk() (*V1MatchString, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *V1Rule) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given V1MatchString and assigns it to the Method field.
func (o *V1Rule) SetMethod(v V1MatchString) {
	o.Method = &v
}

// GetMtime returns the Mtime field value if set, zero value otherwise.
func (o *V1Rule) GetMtime() string {
	if o == nil || o.Mtime == nil {
		var ret string
		return ret
	}
	return *o.Mtime
}

// GetMtimeOk returns a tuple with the Mtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetMtimeOk() (*string, bool) {
	if o == nil || o.Mtime == nil {
		return nil, false
	}
	return o.Mtime, true
}

// HasMtime returns a boolean if a field has been set.
func (o *V1Rule) HasMtime() bool {
	if o != nil && o.Mtime != nil {
		return true
	}

	return false
}

// SetMtime gets a reference to the given string and assigns it to the Mtime field.
func (o *V1Rule) SetMtime(v string) {
	o.Mtime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1Rule) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1Rule) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1Rule) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *V1Rule) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *V1Rule) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *V1Rule) SetNamespace(v string) {
	o.Namespace = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *V1Rule) GetPriority() int32 {
	if o == nil || o.Priority == nil {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetPriorityOk() (*int32, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *V1Rule) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *V1Rule) SetPriority(v int32) {
	o.Priority = &v
}

// GetRegexCombine returns the RegexCombine field value if set, zero value otherwise.
func (o *V1Rule) GetRegexCombine() bool {
	if o == nil || o.RegexCombine == nil {
		var ret bool
		return ret
	}
	return *o.RegexCombine
}

// GetRegexCombineOk returns a tuple with the RegexCombine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetRegexCombineOk() (*bool, bool) {
	if o == nil || o.RegexCombine == nil {
		return nil, false
	}
	return o.RegexCombine, true
}

// HasRegexCombine returns a boolean if a field has been set.
func (o *V1Rule) HasRegexCombine() bool {
	if o != nil && o.RegexCombine != nil {
		return true
	}

	return false
}

// SetRegexCombine gets a reference to the given bool and assigns it to the RegexCombine field.
func (o *V1Rule) SetRegexCombine(v bool) {
	o.RegexCombine = &v
}

// GetReport returns the Report field value if set, zero value otherwise.
func (o *V1Rule) GetReport() V1Report {
	if o == nil || o.Report == nil {
		var ret V1Report
		return ret
	}
	return *o.Report
}

// GetReportOk returns a tuple with the Report field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetReportOk() (*V1Report, bool) {
	if o == nil || o.Report == nil {
		return nil, false
	}
	return o.Report, true
}

// HasReport returns a boolean if a field has been set.
func (o *V1Rule) HasReport() bool {
	if o != nil && o.Report != nil {
		return true
	}

	return false
}

// SetReport gets a reference to the given V1Report and assigns it to the Report field.
func (o *V1Rule) SetReport(v V1Report) {
	o.Report = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *V1Rule) GetResource() int32 {
	if o == nil || o.Resource == nil {
		var ret int32
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetResourceOk() (*int32, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *V1Rule) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given int32 and assigns it to the Resource field.
func (o *V1Rule) SetResource(v int32) {
	o.Resource = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *V1Rule) GetRevision() string {
	if o == nil || o.Revision == nil {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetRevisionOk() (*string, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *V1Rule) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *V1Rule) SetRevision(v string) {
	o.Revision = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *V1Rule) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *V1Rule) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *V1Rule) SetService(v string) {
	o.Service = &v
}

// GetServiceToken returns the ServiceToken field value if set, zero value otherwise.
func (o *V1Rule) GetServiceToken() string {
	if o == nil || o.ServiceToken == nil {
		var ret string
		return ret
	}
	return *o.ServiceToken
}

// GetServiceTokenOk returns a tuple with the ServiceToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetServiceTokenOk() (*string, bool) {
	if o == nil || o.ServiceToken == nil {
		return nil, false
	}
	return o.ServiceToken, true
}

// HasServiceToken returns a boolean if a field has been set.
func (o *V1Rule) HasServiceToken() bool {
	if o != nil && o.ServiceToken != nil {
		return true
	}

	return false
}

// SetServiceToken gets a reference to the given string and assigns it to the ServiceToken field.
func (o *V1Rule) SetServiceToken(v string) {
	o.ServiceToken = &v
}

// GetSubset returns the Subset field value if set, zero value otherwise.
func (o *V1Rule) GetSubset() map[string]V1MatchString {
	if o == nil || o.Subset == nil {
		var ret map[string]V1MatchString
		return ret
	}
	return *o.Subset
}

// GetSubsetOk returns a tuple with the Subset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetSubsetOk() (*map[string]V1MatchString, bool) {
	if o == nil || o.Subset == nil {
		return nil, false
	}
	return o.Subset, true
}

// HasSubset returns a boolean if a field has been set.
func (o *V1Rule) HasSubset() bool {
	if o != nil && o.Subset != nil {
		return true
	}

	return false
}

// SetSubset gets a reference to the given map[string]V1MatchString and assigns it to the Subset field.
func (o *V1Rule) SetSubset(v map[string]V1MatchString) {
	o.Subset = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1Rule) GetType() int32 {
	if o == nil || o.Type == nil {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Rule) GetTypeOk() (*int32, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1Rule) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *V1Rule) SetType(v int32) {
	o.Type = &v
}

func (o V1Rule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if o.Adjuster != nil {
		toSerialize["adjuster"] = o.Adjuster
	}
	if o.AmountMode != nil {
		toSerialize["amount_mode"] = o.AmountMode
	}
	if o.Amounts != nil {
		toSerialize["amounts"] = o.Amounts
	}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	if o.Cluster != nil {
		toSerialize["cluster"] = o.Cluster
	}
	if o.Ctime != nil {
		toSerialize["ctime"] = o.Ctime
	}
	if o.Disable != nil {
		toSerialize["disable"] = o.Disable
	}
	if o.Etime != nil {
		toSerialize["etime"] = o.Etime
	}
	if o.Failover != nil {
		toSerialize["failover"] = o.Failover
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.MaxQueueDelay != nil {
		toSerialize["max_queue_delay"] = o.MaxQueueDelay
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	if o.Mtime != nil {
		toSerialize["mtime"] = o.Mtime
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.RegexCombine != nil {
		toSerialize["regex_combine"] = o.RegexCombine
	}
	if o.Report != nil {
		toSerialize["report"] = o.Report
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	if o.Revision != nil {
		toSerialize["revision"] = o.Revision
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.ServiceToken != nil {
		toSerialize["service_token"] = o.ServiceToken
	}
	if o.Subset != nil {
		toSerialize["subset"] = o.Subset
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableV1Rule struct {
	value *V1Rule
	isSet bool
}

func (v NullableV1Rule) Get() *V1Rule {
	return v.value
}

func (v *NullableV1Rule) Set(val *V1Rule) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Rule) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Rule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Rule(val *V1Rule) *NullableV1Rule {
	return &NullableV1Rule{value: val, isSet: true}
}

func (v NullableV1Rule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Rule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


