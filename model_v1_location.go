/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1Location struct for V1Location
type V1Location struct {
	Campus *string `json:"campus,omitempty"`
	Region *string `json:"region,omitempty"`
	Zone *string `json:"zone,omitempty"`
}

// NewV1Location instantiates a new V1Location object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Location() *V1Location {
	this := V1Location{}
	return &this
}

// NewV1LocationWithDefaults instantiates a new V1Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1LocationWithDefaults() *V1Location {
	this := V1Location{}
	return &this
}

// GetCampus returns the Campus field value if set, zero value otherwise.
func (o *V1Location) GetCampus() string {
	if o == nil || o.Campus == nil {
		var ret string
		return ret
	}
	return *o.Campus
}

// GetCampusOk returns a tuple with the Campus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Location) GetCampusOk() (*string, bool) {
	if o == nil || o.Campus == nil {
		return nil, false
	}
	return o.Campus, true
}

// HasCampus returns a boolean if a field has been set.
func (o *V1Location) HasCampus() bool {
	if o != nil && o.Campus != nil {
		return true
	}

	return false
}

// SetCampus gets a reference to the given string and assigns it to the Campus field.
func (o *V1Location) SetCampus(v string) {
	o.Campus = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *V1Location) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Location) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *V1Location) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *V1Location) SetRegion(v string) {
	o.Region = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *V1Location) GetZone() string {
	if o == nil || o.Zone == nil {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Location) GetZoneOk() (*string, bool) {
	if o == nil || o.Zone == nil {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *V1Location) HasZone() bool {
	if o != nil && o.Zone != nil {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *V1Location) SetZone(v string) {
	o.Zone = &v
}

func (o V1Location) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Campus != nil {
		toSerialize["campus"] = o.Campus
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Zone != nil {
		toSerialize["zone"] = o.Zone
	}
	return json.Marshal(toSerialize)
}

type NullableV1Location struct {
	value *V1Location
	isSet bool
}

func (v NullableV1Location) Get() *V1Location {
	return v.value
}

func (v *NullableV1Location) Set(val *V1Location) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Location) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Location) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Location(val *V1Location) *NullableV1Location {
	return &NullableV1Location{value: val, isSet: true}
}

func (v NullableV1Location) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Location) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


