/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1Namespace struct for V1Namespace
type V1Namespace struct {
	Comment *string `json:"comment,omitempty"`
	Ctime *string `json:"ctime,omitempty"`
	Editable *bool `json:"editable,omitempty"`
	GroupIds *[]string `json:"group_ids,omitempty"`
	Id *string `json:"id,omitempty"`
	Mtime *string `json:"mtime,omitempty"`
	Name *string `json:"name,omitempty"`
	Owners *string `json:"owners,omitempty"`
	RemoveGroupIds *[]string `json:"remove_group_ids,omitempty"`
	RemoveUserIds *[]string `json:"remove_user_ids,omitempty"`
	Token *string `json:"token,omitempty"`
	TotalHealthInstanceCount *int32 `json:"total_health_instance_count,omitempty"`
	TotalInstanceCount *int32 `json:"total_instance_count,omitempty"`
	TotalServiceCount *int32 `json:"total_service_count,omitempty"`
	UserIds *[]string `json:"user_ids,omitempty"`
}

// NewV1Namespace instantiates a new V1Namespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Namespace() *V1Namespace {
	this := V1Namespace{}
	return &this
}

// NewV1NamespaceWithDefaults instantiates a new V1Namespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1NamespaceWithDefaults() *V1Namespace {
	this := V1Namespace{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *V1Namespace) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *V1Namespace) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *V1Namespace) SetComment(v string) {
	o.Comment = &v
}

// GetCtime returns the Ctime field value if set, zero value otherwise.
func (o *V1Namespace) GetCtime() string {
	if o == nil || o.Ctime == nil {
		var ret string
		return ret
	}
	return *o.Ctime
}

// GetCtimeOk returns a tuple with the Ctime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetCtimeOk() (*string, bool) {
	if o == nil || o.Ctime == nil {
		return nil, false
	}
	return o.Ctime, true
}

// HasCtime returns a boolean if a field has been set.
func (o *V1Namespace) HasCtime() bool {
	if o != nil && o.Ctime != nil {
		return true
	}

	return false
}

// SetCtime gets a reference to the given string and assigns it to the Ctime field.
func (o *V1Namespace) SetCtime(v string) {
	o.Ctime = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *V1Namespace) GetEditable() bool {
	if o == nil || o.Editable == nil {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetEditableOk() (*bool, bool) {
	if o == nil || o.Editable == nil {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *V1Namespace) HasEditable() bool {
	if o != nil && o.Editable != nil {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *V1Namespace) SetEditable(v bool) {
	o.Editable = &v
}

// GetGroupIds returns the GroupIds field value if set, zero value otherwise.
func (o *V1Namespace) GetGroupIds() []string {
	if o == nil || o.GroupIds == nil {
		var ret []string
		return ret
	}
	return *o.GroupIds
}

// GetGroupIdsOk returns a tuple with the GroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetGroupIdsOk() (*[]string, bool) {
	if o == nil || o.GroupIds == nil {
		return nil, false
	}
	return o.GroupIds, true
}

// HasGroupIds returns a boolean if a field has been set.
func (o *V1Namespace) HasGroupIds() bool {
	if o != nil && o.GroupIds != nil {
		return true
	}

	return false
}

// SetGroupIds gets a reference to the given []string and assigns it to the GroupIds field.
func (o *V1Namespace) SetGroupIds(v []string) {
	o.GroupIds = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1Namespace) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1Namespace) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1Namespace) SetId(v string) {
	o.Id = &v
}

// GetMtime returns the Mtime field value if set, zero value otherwise.
func (o *V1Namespace) GetMtime() string {
	if o == nil || o.Mtime == nil {
		var ret string
		return ret
	}
	return *o.Mtime
}

// GetMtimeOk returns a tuple with the Mtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetMtimeOk() (*string, bool) {
	if o == nil || o.Mtime == nil {
		return nil, false
	}
	return o.Mtime, true
}

// HasMtime returns a boolean if a field has been set.
func (o *V1Namespace) HasMtime() bool {
	if o != nil && o.Mtime != nil {
		return true
	}

	return false
}

// SetMtime gets a reference to the given string and assigns it to the Mtime field.
func (o *V1Namespace) SetMtime(v string) {
	o.Mtime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1Namespace) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1Namespace) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1Namespace) SetName(v string) {
	o.Name = &v
}

// GetOwners returns the Owners field value if set, zero value otherwise.
func (o *V1Namespace) GetOwners() string {
	if o == nil || o.Owners == nil {
		var ret string
		return ret
	}
	return *o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetOwnersOk() (*string, bool) {
	if o == nil || o.Owners == nil {
		return nil, false
	}
	return o.Owners, true
}

// HasOwners returns a boolean if a field has been set.
func (o *V1Namespace) HasOwners() bool {
	if o != nil && o.Owners != nil {
		return true
	}

	return false
}

// SetOwners gets a reference to the given string and assigns it to the Owners field.
func (o *V1Namespace) SetOwners(v string) {
	o.Owners = &v
}

// GetRemoveGroupIds returns the RemoveGroupIds field value if set, zero value otherwise.
func (o *V1Namespace) GetRemoveGroupIds() []string {
	if o == nil || o.RemoveGroupIds == nil {
		var ret []string
		return ret
	}
	return *o.RemoveGroupIds
}

// GetRemoveGroupIdsOk returns a tuple with the RemoveGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetRemoveGroupIdsOk() (*[]string, bool) {
	if o == nil || o.RemoveGroupIds == nil {
		return nil, false
	}
	return o.RemoveGroupIds, true
}

// HasRemoveGroupIds returns a boolean if a field has been set.
func (o *V1Namespace) HasRemoveGroupIds() bool {
	if o != nil && o.RemoveGroupIds != nil {
		return true
	}

	return false
}

// SetRemoveGroupIds gets a reference to the given []string and assigns it to the RemoveGroupIds field.
func (o *V1Namespace) SetRemoveGroupIds(v []string) {
	o.RemoveGroupIds = &v
}

// GetRemoveUserIds returns the RemoveUserIds field value if set, zero value otherwise.
func (o *V1Namespace) GetRemoveUserIds() []string {
	if o == nil || o.RemoveUserIds == nil {
		var ret []string
		return ret
	}
	return *o.RemoveUserIds
}

// GetRemoveUserIdsOk returns a tuple with the RemoveUserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetRemoveUserIdsOk() (*[]string, bool) {
	if o == nil || o.RemoveUserIds == nil {
		return nil, false
	}
	return o.RemoveUserIds, true
}

// HasRemoveUserIds returns a boolean if a field has been set.
func (o *V1Namespace) HasRemoveUserIds() bool {
	if o != nil && o.RemoveUserIds != nil {
		return true
	}

	return false
}

// SetRemoveUserIds gets a reference to the given []string and assigns it to the RemoveUserIds field.
func (o *V1Namespace) SetRemoveUserIds(v []string) {
	o.RemoveUserIds = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *V1Namespace) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *V1Namespace) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *V1Namespace) SetToken(v string) {
	o.Token = &v
}

// GetTotalHealthInstanceCount returns the TotalHealthInstanceCount field value if set, zero value otherwise.
func (o *V1Namespace) GetTotalHealthInstanceCount() int32 {
	if o == nil || o.TotalHealthInstanceCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalHealthInstanceCount
}

// GetTotalHealthInstanceCountOk returns a tuple with the TotalHealthInstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetTotalHealthInstanceCountOk() (*int32, bool) {
	if o == nil || o.TotalHealthInstanceCount == nil {
		return nil, false
	}
	return o.TotalHealthInstanceCount, true
}

// HasTotalHealthInstanceCount returns a boolean if a field has been set.
func (o *V1Namespace) HasTotalHealthInstanceCount() bool {
	if o != nil && o.TotalHealthInstanceCount != nil {
		return true
	}

	return false
}

// SetTotalHealthInstanceCount gets a reference to the given int32 and assigns it to the TotalHealthInstanceCount field.
func (o *V1Namespace) SetTotalHealthInstanceCount(v int32) {
	o.TotalHealthInstanceCount = &v
}

// GetTotalInstanceCount returns the TotalInstanceCount field value if set, zero value otherwise.
func (o *V1Namespace) GetTotalInstanceCount() int32 {
	if o == nil || o.TotalInstanceCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalInstanceCount
}

// GetTotalInstanceCountOk returns a tuple with the TotalInstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetTotalInstanceCountOk() (*int32, bool) {
	if o == nil || o.TotalInstanceCount == nil {
		return nil, false
	}
	return o.TotalInstanceCount, true
}

// HasTotalInstanceCount returns a boolean if a field has been set.
func (o *V1Namespace) HasTotalInstanceCount() bool {
	if o != nil && o.TotalInstanceCount != nil {
		return true
	}

	return false
}

// SetTotalInstanceCount gets a reference to the given int32 and assigns it to the TotalInstanceCount field.
func (o *V1Namespace) SetTotalInstanceCount(v int32) {
	o.TotalInstanceCount = &v
}

// GetTotalServiceCount returns the TotalServiceCount field value if set, zero value otherwise.
func (o *V1Namespace) GetTotalServiceCount() int32 {
	if o == nil || o.TotalServiceCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalServiceCount
}

// GetTotalServiceCountOk returns a tuple with the TotalServiceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetTotalServiceCountOk() (*int32, bool) {
	if o == nil || o.TotalServiceCount == nil {
		return nil, false
	}
	return o.TotalServiceCount, true
}

// HasTotalServiceCount returns a boolean if a field has been set.
func (o *V1Namespace) HasTotalServiceCount() bool {
	if o != nil && o.TotalServiceCount != nil {
		return true
	}

	return false
}

// SetTotalServiceCount gets a reference to the given int32 and assigns it to the TotalServiceCount field.
func (o *V1Namespace) SetTotalServiceCount(v int32) {
	o.TotalServiceCount = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *V1Namespace) GetUserIds() []string {
	if o == nil || o.UserIds == nil {
		var ret []string
		return ret
	}
	return *o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Namespace) GetUserIdsOk() (*[]string, bool) {
	if o == nil || o.UserIds == nil {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *V1Namespace) HasUserIds() bool {
	if o != nil && o.UserIds != nil {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *V1Namespace) SetUserIds(v []string) {
	o.UserIds = &v
}

func (o V1Namespace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Ctime != nil {
		toSerialize["ctime"] = o.Ctime
	}
	if o.Editable != nil {
		toSerialize["editable"] = o.Editable
	}
	if o.GroupIds != nil {
		toSerialize["group_ids"] = o.GroupIds
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Mtime != nil {
		toSerialize["mtime"] = o.Mtime
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Owners != nil {
		toSerialize["owners"] = o.Owners
	}
	if o.RemoveGroupIds != nil {
		toSerialize["remove_group_ids"] = o.RemoveGroupIds
	}
	if o.RemoveUserIds != nil {
		toSerialize["remove_user_ids"] = o.RemoveUserIds
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.TotalHealthInstanceCount != nil {
		toSerialize["total_health_instance_count"] = o.TotalHealthInstanceCount
	}
	if o.TotalInstanceCount != nil {
		toSerialize["total_instance_count"] = o.TotalInstanceCount
	}
	if o.TotalServiceCount != nil {
		toSerialize["total_service_count"] = o.TotalServiceCount
	}
	if o.UserIds != nil {
		toSerialize["user_ids"] = o.UserIds
	}
	return json.Marshal(toSerialize)
}

type NullableV1Namespace struct {
	value *V1Namespace
	isSet bool
}

func (v NullableV1Namespace) Get() *V1Namespace {
	return v.value
}

func (v *NullableV1Namespace) Set(val *V1Namespace) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Namespace) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Namespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Namespace(val *V1Namespace) *NullableV1Namespace {
	return &NullableV1Namespace{value: val, isSet: true}
}

func (v NullableV1Namespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Namespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


