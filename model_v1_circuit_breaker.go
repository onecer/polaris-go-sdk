/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1CircuitBreaker struct for V1CircuitBreaker
type V1CircuitBreaker struct {
	Business *string `json:"business,omitempty"`
	Comment *string `json:"comment,omitempty"`
	Ctime *string `json:"ctime,omitempty"`
	Department *string `json:"department,omitempty"`
	Id *string `json:"id,omitempty"`
	Inbounds *[]V1CbRule `json:"inbounds,omitempty"`
	Mtime *string `json:"mtime,omitempty"`
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Outbounds *[]V1CbRule `json:"outbounds,omitempty"`
	Owners *string `json:"owners,omitempty"`
	Revision *string `json:"revision,omitempty"`
	Service *string `json:"service,omitempty"`
	ServiceNamespace *string `json:"service_namespace,omitempty"`
	Token *string `json:"token,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewV1CircuitBreaker instantiates a new V1CircuitBreaker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CircuitBreaker() *V1CircuitBreaker {
	this := V1CircuitBreaker{}
	return &this
}

// NewV1CircuitBreakerWithDefaults instantiates a new V1CircuitBreaker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CircuitBreakerWithDefaults() *V1CircuitBreaker {
	this := V1CircuitBreaker{}
	return &this
}

// GetBusiness returns the Business field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetBusiness() string {
	if o == nil || o.Business == nil {
		var ret string
		return ret
	}
	return *o.Business
}

// GetBusinessOk returns a tuple with the Business field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetBusinessOk() (*string, bool) {
	if o == nil || o.Business == nil {
		return nil, false
	}
	return o.Business, true
}

// HasBusiness returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasBusiness() bool {
	if o != nil && o.Business != nil {
		return true
	}

	return false
}

// SetBusiness gets a reference to the given string and assigns it to the Business field.
func (o *V1CircuitBreaker) SetBusiness(v string) {
	o.Business = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *V1CircuitBreaker) SetComment(v string) {
	o.Comment = &v
}

// GetCtime returns the Ctime field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetCtime() string {
	if o == nil || o.Ctime == nil {
		var ret string
		return ret
	}
	return *o.Ctime
}

// GetCtimeOk returns a tuple with the Ctime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetCtimeOk() (*string, bool) {
	if o == nil || o.Ctime == nil {
		return nil, false
	}
	return o.Ctime, true
}

// HasCtime returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasCtime() bool {
	if o != nil && o.Ctime != nil {
		return true
	}

	return false
}

// SetCtime gets a reference to the given string and assigns it to the Ctime field.
func (o *V1CircuitBreaker) SetCtime(v string) {
	o.Ctime = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetDepartment() string {
	if o == nil || o.Department == nil {
		var ret string
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetDepartmentOk() (*string, bool) {
	if o == nil || o.Department == nil {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasDepartment() bool {
	if o != nil && o.Department != nil {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given string and assigns it to the Department field.
func (o *V1CircuitBreaker) SetDepartment(v string) {
	o.Department = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1CircuitBreaker) SetId(v string) {
	o.Id = &v
}

// GetInbounds returns the Inbounds field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetInbounds() []V1CbRule {
	if o == nil || o.Inbounds == nil {
		var ret []V1CbRule
		return ret
	}
	return *o.Inbounds
}

// GetInboundsOk returns a tuple with the Inbounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetInboundsOk() (*[]V1CbRule, bool) {
	if o == nil || o.Inbounds == nil {
		return nil, false
	}
	return o.Inbounds, true
}

// HasInbounds returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasInbounds() bool {
	if o != nil && o.Inbounds != nil {
		return true
	}

	return false
}

// SetInbounds gets a reference to the given []V1CbRule and assigns it to the Inbounds field.
func (o *V1CircuitBreaker) SetInbounds(v []V1CbRule) {
	o.Inbounds = &v
}

// GetMtime returns the Mtime field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetMtime() string {
	if o == nil || o.Mtime == nil {
		var ret string
		return ret
	}
	return *o.Mtime
}

// GetMtimeOk returns a tuple with the Mtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetMtimeOk() (*string, bool) {
	if o == nil || o.Mtime == nil {
		return nil, false
	}
	return o.Mtime, true
}

// HasMtime returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasMtime() bool {
	if o != nil && o.Mtime != nil {
		return true
	}

	return false
}

// SetMtime gets a reference to the given string and assigns it to the Mtime field.
func (o *V1CircuitBreaker) SetMtime(v string) {
	o.Mtime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1CircuitBreaker) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *V1CircuitBreaker) SetNamespace(v string) {
	o.Namespace = &v
}

// GetOutbounds returns the Outbounds field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetOutbounds() []V1CbRule {
	if o == nil || o.Outbounds == nil {
		var ret []V1CbRule
		return ret
	}
	return *o.Outbounds
}

// GetOutboundsOk returns a tuple with the Outbounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetOutboundsOk() (*[]V1CbRule, bool) {
	if o == nil || o.Outbounds == nil {
		return nil, false
	}
	return o.Outbounds, true
}

// HasOutbounds returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasOutbounds() bool {
	if o != nil && o.Outbounds != nil {
		return true
	}

	return false
}

// SetOutbounds gets a reference to the given []V1CbRule and assigns it to the Outbounds field.
func (o *V1CircuitBreaker) SetOutbounds(v []V1CbRule) {
	o.Outbounds = &v
}

// GetOwners returns the Owners field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetOwners() string {
	if o == nil || o.Owners == nil {
		var ret string
		return ret
	}
	return *o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetOwnersOk() (*string, bool) {
	if o == nil || o.Owners == nil {
		return nil, false
	}
	return o.Owners, true
}

// HasOwners returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasOwners() bool {
	if o != nil && o.Owners != nil {
		return true
	}

	return false
}

// SetOwners gets a reference to the given string and assigns it to the Owners field.
func (o *V1CircuitBreaker) SetOwners(v string) {
	o.Owners = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetRevision() string {
	if o == nil || o.Revision == nil {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetRevisionOk() (*string, bool) {
	if o == nil || o.Revision == nil {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasRevision() bool {
	if o != nil && o.Revision != nil {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *V1CircuitBreaker) SetRevision(v string) {
	o.Revision = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *V1CircuitBreaker) SetService(v string) {
	o.Service = &v
}

// GetServiceNamespace returns the ServiceNamespace field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetServiceNamespace() string {
	if o == nil || o.ServiceNamespace == nil {
		var ret string
		return ret
	}
	return *o.ServiceNamespace
}

// GetServiceNamespaceOk returns a tuple with the ServiceNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetServiceNamespaceOk() (*string, bool) {
	if o == nil || o.ServiceNamespace == nil {
		return nil, false
	}
	return o.ServiceNamespace, true
}

// HasServiceNamespace returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasServiceNamespace() bool {
	if o != nil && o.ServiceNamespace != nil {
		return true
	}

	return false
}

// SetServiceNamespace gets a reference to the given string and assigns it to the ServiceNamespace field.
func (o *V1CircuitBreaker) SetServiceNamespace(v string) {
	o.ServiceNamespace = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *V1CircuitBreaker) SetToken(v string) {
	o.Token = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *V1CircuitBreaker) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CircuitBreaker) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *V1CircuitBreaker) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *V1CircuitBreaker) SetVersion(v string) {
	o.Version = &v
}

func (o V1CircuitBreaker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Business != nil {
		toSerialize["business"] = o.Business
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Ctime != nil {
		toSerialize["ctime"] = o.Ctime
	}
	if o.Department != nil {
		toSerialize["department"] = o.Department
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Inbounds != nil {
		toSerialize["inbounds"] = o.Inbounds
	}
	if o.Mtime != nil {
		toSerialize["mtime"] = o.Mtime
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Outbounds != nil {
		toSerialize["outbounds"] = o.Outbounds
	}
	if o.Owners != nil {
		toSerialize["owners"] = o.Owners
	}
	if o.Revision != nil {
		toSerialize["revision"] = o.Revision
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.ServiceNamespace != nil {
		toSerialize["service_namespace"] = o.ServiceNamespace
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableV1CircuitBreaker struct {
	value *V1CircuitBreaker
	isSet bool
}

func (v NullableV1CircuitBreaker) Get() *V1CircuitBreaker {
	return v.value
}

func (v *NullableV1CircuitBreaker) Set(val *V1CircuitBreaker) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CircuitBreaker) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CircuitBreaker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CircuitBreaker(val *V1CircuitBreaker) *NullableV1CircuitBreaker {
	return &NullableV1CircuitBreaker{value: val, isSet: true}
}

func (v NullableV1CircuitBreaker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CircuitBreaker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


