/*
Polaris Server

一个支持多语言、多框架的云原生服务发现和治理中心  提供高性能SDK和无侵入Sidecar两种接入方式  

API version: v0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package polaris

import (
	"encoding/json"
)

// V1Principals struct for V1Principals
type V1Principals struct {
	Groups *[]V1Principal `json:"groups,omitempty"`
	Users *[]V1Principal `json:"users,omitempty"`
}

// NewV1Principals instantiates a new V1Principals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Principals() *V1Principals {
	this := V1Principals{}
	return &this
}

// NewV1PrincipalsWithDefaults instantiates a new V1Principals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PrincipalsWithDefaults() *V1Principals {
	this := V1Principals{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *V1Principals) GetGroups() []V1Principal {
	if o == nil || o.Groups == nil {
		var ret []V1Principal
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Principals) GetGroupsOk() (*[]V1Principal, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *V1Principals) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []V1Principal and assigns it to the Groups field.
func (o *V1Principals) SetGroups(v []V1Principal) {
	o.Groups = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *V1Principals) GetUsers() []V1Principal {
	if o == nil || o.Users == nil {
		var ret []V1Principal
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Principals) GetUsersOk() (*[]V1Principal, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *V1Principals) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []V1Principal and assigns it to the Users field.
func (o *V1Principals) SetUsers(v []V1Principal) {
	o.Users = &v
}

func (o V1Principals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableV1Principals struct {
	value *V1Principals
	isSet bool
}

func (v NullableV1Principals) Get() *V1Principals {
	return v.value
}

func (v *NullableV1Principals) Set(val *V1Principals) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Principals) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Principals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Principals(val *V1Principals) *NullableV1Principals {
	return &NullableV1Principals{value: val, isSet: true}
}

func (v NullableV1Principals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Principals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


